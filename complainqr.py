# -*- coding: utf-8 -*-
"""complainqr.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1At51LQesBtDWjkJhkqQgHU2oPt-cFrgX
"""

!pip install streamlit
!pip install smtplib
!pip install pandas
!pip install pyqrcode
!pip install pillow
!pip install matplotlib

import streamlit as st
import smtplib, ssl
import sqlite3
import pandas as pd
import pyqrcode
from PIL import Image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

def send_email(sender_email, password, receiver_email, subject, body):
    try:
        port = 465
        smtp_server = "smtp.gmail.com"
        context = ssl.create_default_context()
        message = f"Subject: {subject}\n\n{body}"

        with smtplib.SMTP_SSL(smtp_server, port, context=context) as server:
            server.login(sender_email, password)
            server.sendmail(sender_email, receiver_email, message)

        st.success("Email sent successfully!")
    except Exception as e:
        st.error(f"Error sending email: {e}")

def insert_complaint(student, faculty, date, section, department, id, name, email, phone, complaint):
    conn = sqlite3.connect('mitaoe.db')
    cursor = conn.cursor()

    cursor.execute("""
    CREATE TABLE IF NOT EXISTS MITComplaints(
        Student TEXT,
        Faculty TEXT,
        Date TEXT,
        Section TEXT,
        Department TEXT,
        ID INTEGER,
        Name TEXT,
        Email TEXT,
        PhoneNumber TEXT,
        Complaint TEXT
    )
    """
    )

    cursor.execute("""
    INSERT INTO MITComplaints(Student, Faculty, Date, Section, Department, ID, Name, Email, PhoneNumber, Complaint)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, (student, faculty, date, section, department, id, name, email, phone, complaint))

    conn.commit()
    conn.close()
    st.success("Complaint registered successfully!")

def display_complaints():
    conn = sqlite3.connect('mitaoe.db')
    df = pd.read_sql_query("SELECT * FROM MITComplaints", conn)
    conn.close()
    st.dataframe(df)

def generate_qr_code(data):
    qr = pyqrcode.create(data)
    qr.png("qr_code.png", scale=10)
    st.image("qr_code.png", caption="Generated QR Code")

def main():
    st.title("Complaint Resolution System")

    st.sidebar.header("Navigation")
    option = st.sidebar.selectbox("Choose an option", ["Home", "Register Complaint", "View Complaints", "Send Email", "Generate QR Code"])

    if option == "Home":
        st.write("Welcome to the Complaint Resolution System!")

    elif option == "Register Complaint":
        st.header("Register Complaint")

        student = st.checkbox("Student")
        faculty = st.checkbox("Faculty")
        date = st.date_input("Date")
        section = st.selectbox("Section", ["Student", "Exam", "Admin", "Faculty", "Staff", "Store"])
        department = st.selectbox("Department", ["Computer", "Software Engineering", "AIML", "DataScience", "IT", "E and TC", "Mechanical", "Civil"])
        id = st.number_input("ID", step=1)
        name = st.text_input("Name")
        email = st.text_input("Email")
        phone = st.text_input("Phone Number")
        complaint = st.text_area("Complaint")

        if st.button("Submit Complaint"):
            insert_complaint(student, faculty, str(date), section, department, id, name, email, phone, complaint)

    elif option == "View Complaints":
        st.header("View Complaints")
        display_complaints()

    elif option == "Send Email":
        st.header("Send Email")
        sender_email = st.text_input("Sender Email")
        password = st.text_input("Password", type="password")
        receiver_email = st.text_input("Receiver Email")
        subject = st.text_input("Subject")
        body = st.text_area("Message Body")

        if st.button("Send Email"):
            send_email(sender_email, password, receiver_email, subject, body)

    elif option == "Generate QR Code":
        st.header("Generate QR Code")
        data = st.text_input("Enter data for QR Code")

        if st.button("Generate QR Code"):
            generate_qr_code(data)

if __name__ == "__main__":
    main()